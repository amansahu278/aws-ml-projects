import sagemaker
from sagemaker.huggingface import HuggingFaceModel
import argparse
import os

session = sagemaker.Session()
region = session.boto_session.region_name
role = sagemaker.get_execution_role()


def deploy_model(
    model_data: str,
    endpoint_name: str = None,
    instance_type: str = "ml.m5.xlarge",
    instance_count: int = 1,
):
    
    print("=" * 80)
    print("SageMaker Model Deployment")
    print("=" * 80)
    print(f"\nModel artifacts:  {model_data}")
    print(f"Instance type:    {instance_type}")
    print(f"Instance count:   {instance_count}")
    print(f"Endpoint name:    {endpoint_name or '<auto-generated>'}")
    print("=" * 80 + "\n")
    
    huggingface_model = HuggingFaceModel(
        model_data=model_data,
        role=role,
        transformers_version="4.36.0",
        pytorch_version="2.1.0",
        py_version="py310",
        sagemaker_session=session,
    )

    print(f"\nDeploying model to endpoint...")
    
    predictor = huggingface_model.deploy(
        initial_instance_count=instance_count,
        instance_type=instance_type,
        endpoint_name=endpoint_name,
    )

    print("\n" + "=" * 80)
    print("Deployment Successful!")
    print("=" * 80)
    print(f"\nEndpoint name:   {predictor.endpoint_name}")
    print(f"Endpoint URL:    {predictor.endpoint_url}")
    print("=" * 80)
    
    return predictor


def delete_endpoint(endpoint_name: str):
    print("=" * 80)
    print("Deleting SageMaker Endpoint")
    print("=" * 80)
    print(f"\nEndpoint: {endpoint_name}")
    print("=" * 80 + "\n")
    
    try:
        session.delete_endpoint(endpoint_name)
        print(f"Endpoint '{endpoint_name}' deleted successfully!")
    except Exception as e:
        print(f"Error deleting endpoint: {e}")    
    print("=" * 80)


def test_endpoint(endpoint_name: str, test_input: str = "Hello, how are you?"):
    from sagemaker.huggingface import HuggingFacePredictor
    
    print("=" * 80)
    print("Testing Endpoint")
    print("=" * 80)
    print(f"\nEndpoint: {endpoint_name}")
    print(f"Test input: {test_input}")
    print("=" * 80 + "\n")
    
    predictor = HuggingFacePredictor(endpoint_name=endpoint_name)
    
    response = predictor.predict({
        "inputs": test_input
    })
    
    print("Response:")
    print(response)
    print("\n" + "=" * 80)
    
    return response


def parse_args():
    parser = argparse.ArgumentParser(
        description="Deploying a model to sagemaker endpoint",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    
    subparsers = parser.add_subparsers(dest='command', required=True, help='Command to execute')
    
    deploy_parser = subparsers.add_parser('deploy', help='Deploy a model to an endpoint')
    deploy_parser.add_argument(
        '--model-data',
        type=str,
        required=True,
        help='S3 path to model artifacts (e.g., s3://bucket/model.tar.gz)'
    )
    deploy_parser.add_argument(
        '--endpoint-name',
        type=str,
        default=None,
        help='Name for the endpoint (auto-generated if not provided)'
    )
    deploy_parser.add_argument(
        '--instance-type',
        type=str,
        default='ml.t2.medium',
        help='Instance type for the endpoint'
    )
    deploy_parser.add_argument(
        '--instance-count',
        type=int,
        default=1,
        help='Number of instances'
    )
    
    delete_parser = subparsers.add_parser('delete', help='Delete an existing endpoint')
    delete_parser.add_argument(
        '--endpoint-name',
        type=str,
        required=True,
        help='Name of the endpoint to delete'
    )
    
    test_parser = subparsers.add_parser('test', help='Test an existing endpoint')
    test_parser.add_argument(
        '--endpoint-name',
        type=str,
        required=True,
        help='Name of the endpoint to test'
    )
    test_parser.add_argument(
        '--test-input',
        type=str,
        default='Hello, how are you?',
        help='Sample input for testing'
    )
    
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    
    if args.command == 'deploy':
        predictor = deploy_model(
            model_data=args.model_data,
            endpoint_name=args.endpoint_name,
            instance_type=args.instance_type,
            instance_count=args.instance_count,
        )
    
    elif args.command == 'delete':
        delete_endpoint(args.endpoint_name)
    
    elif args.command == 'test':
        test_endpoint(args.endpoint_name, args.test_input)

